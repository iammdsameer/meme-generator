{"version":3,"sources":["components/MemeGenerator.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["MemeGenerator","state","topText","bottomText","randomImage","memeResults","handleChange","bind","fireNewMeme","fetch","then","response","json","memes","data","setState","e","target","name","value","this","Math","floor","random","url","className","type","placeholder","onChange","onClick","src","alt","width","Component","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qTA8EeA,G,wDA1Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,YAAa,iCACbC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBATP,E,gEAYO,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IACXE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CACZV,YAAaQ,S,mCAKRG,GAAI,IAAD,EACUA,EAAEC,OAAlBC,EADM,EACNA,KAAMC,EADA,EACAA,MACdC,KAAKL,SAAL,eACGG,EAAOC,M,oCAKVC,KAAKL,SAAS,CACZX,YAAagB,KAAKnB,MAAMI,YAAYgB,KAAKC,MAAsB,IAAhBD,KAAKE,WAAiBC,Q,+BAKvE,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACb,8BACE,2BACEA,UAAU,oBACVC,KAAK,OACLR,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClByB,YAAY,gBACZC,SAAUR,KAAKd,eAEjB,2BACEmB,UAAU,oBACVC,KAAK,OACLR,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClBwB,YAAY,mBACZC,SAAUR,KAAKd,gBAGnB,4BAAQmB,UAAU,kBAAkBI,QAAST,KAAKZ,aAAlD,wBAIF,yBAAKiB,UAAU,OACb,yBAAKK,IAAKV,KAAKnB,MAAMG,YAAa2B,IAAI,cAAcC,MAAM,QAC1D,wBAAIP,UAAU,OAAOL,KAAKnB,MAAMC,SAChC,wBAAIuB,UAAU,UAAUL,KAAKnB,MAAME,mB,GAnEnB8B,c,MCQbC,MARf,WACE,OACE,gCACE,wBAAIT,UAAU,SAAd,oBCSSU,MATf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9dd4c336.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./MemeGenerator.css\";\r\n\r\nclass MemeGenerator extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      randomImage: \"https://i.imgflip.com/9vct.jpg\",\r\n      memeResults: [],\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.fireNewMeme = this.fireNewMeme.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        const { memes } = response.data;\r\n        this.setState({\r\n          memeResults: memes,\r\n        });\r\n      });\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  fireNewMeme() {\r\n    this.setState({\r\n      randomImage: this.state.memeResults[Math.floor(Math.random() * 100)].url,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container main-div\">\r\n        <div className=\"row\">\r\n          <div className=\"col form-div\">\r\n            <form>\r\n              <input\r\n                className=\"form-control mb-3\"\r\n                type=\"text\"\r\n                name=\"topText\"\r\n                value={this.state.topText}\r\n                placeholder=\"Top Text Here\"\r\n                onChange={this.handleChange}\r\n              />\r\n              <input\r\n                className=\"form-control mb-3\"\r\n                type=\"text\"\r\n                name=\"bottomText\"\r\n                value={this.state.bottomText}\r\n                placeholder=\"Bottom Text Here\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </form>\r\n            <button className=\"btn btn-primary\" onClick={this.fireNewMeme}>\r\n              Blah, Find Another!\r\n            </button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <img src={this.state.randomImage} alt=\"random-meme\" width=\"600\" />\r\n            <h1 className=\"top\">{this.state.topText}</h1>\r\n            <h1 className=\"bottom\">{this.state.bottomText}</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from \"react\";\r\nimport \"./Header.style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1 className=\"title\">Meme Generator</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\n// import \"./App.css\";\n\nimport MemeGenerator from \"./components/MemeGenerator\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}